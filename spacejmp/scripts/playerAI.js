// SAVE
/*

[[[08364,88754,49518,22299,52977,06516-44367-02227,31914,42852-37538,17655,07893,36217,90332-78368-33861,08126-50922-86957,64047,79557,76982-84084-22807-26289-88072,68787-8077-43609-62624-75672,17904,10021-38703,73789-57066,18973-11928,83497-47589,07501-32761,52617,32525-45863,59644,00707-214-76756,04563-51369-52589,84421,33884-4173][61274,57396-7701,12124,90623,55056-66361-68014,31242-63849,87919-02515,79075,37604-88768,57055,32399,07971,59768-13487-89307,06963,88283,2861,62606,23883-53314-89068,10314,54202-05509,20296,56505-60789,51956-11606-58226,38046-81195,68178-07466,05913,72546,27677-65928-52536-22052,73952,78575-4711-11395-66959,03374,79083,48137-07416][-36057-83836-61204-37767-04717-54342,60763-62153-92728-24311-44944-59953,49316-71041-83216,52281-10133-03442-69814,53723,02976,82251-46891-45845-43454,79116,65276-68928-84982-16253-42596-40896,60951-54439-82913,56178,91362,49128,6255,70056,62033-4454,45296-81672,45597-85908,65986,45405-76743,20331,09396,47505,35266-11571-5595,19158][-11993-78922,03365-49103,34877-86398-49046-12185-69367,01908,84308-34448,5872-3515,40518-91309-89193,05218,21935,27373,41094,68332-18214-61343,41584,31674-5637-9217-02292-25496-80141,09407-13661-18387-04148,25163-5469,23169,10339-89454,5269-71699,28746,54672-43484-25866-10518-35484,22042,76701-37884,85559,40272,8306,69658-4458][-40097,0827,10824,20565,88161,25994,06628-03221-44754-17101,44145,16783-29117-77756-64284,26904,48196,0093,07896-11415-82406-05465-76067-57169,85921-64961,14238-19983-35565,22989-04831,10485,509-85453-36453-54284,26222-79906-58487-11219-54783-7266,26401-28199,31669,75807-25785-47554-28258,60679,69145-44646-77058-63764,74477,34259][84563,76934,02138,4064,00775-69461,16902-89373-8534,30713-05727-12126-89577,2672,29005,32262,53402,35109,4272,65708-51602,15848,58437,824-11885,28425,89974-73435-66716-11135-74932-16808,80191-28423,74546,46763-64814,39552,3242,88515-88155,55255-1204-0647-57878,00474-36846,31448,21485,40087-07383,61506,15792,85706-08734,42393][11788,60356,87107,03573,02109,10717,15554-80252-2925-5015,55121,60237-61557-84086,3712,64324-63128-24995,21619,70524-32177,61677-40833,31622,73896,8762,24889,48988-149-38231,89436,21408-61252,21263,03845,68614-37103-12002,18782-10253-40613-55397,11031-25165,09647-57107-49079-03558,43296-26315-29501,91711-6111-40929,70449,2713][76133-14291,03107-19436-28169-77096,8972-02457,34872,13071,89957-14834-71913,65611-34012-30246,92949-05748,83157,55434-58855,37681,0403-30841,05167-35647,74392,32338-78109,4688-07754-76398,62373-79072-16148-53627-36374-4137-06478-42853,80584,39834,17557,60289-31046-90456-77484-02294,2977,80556-56471,48612,84581,10199-22911,81387][-66676,36193,1432,71948-12673,12407-42849,29496,85447,86476-61218-01414,85381,88711,87521-53312,54947,53504-37101-04354-60341,69052-46512-88914,5898,85014,73246-8157,83913-75273-40252-33988-29042-34699,26427,47469,68735-3468,71308-74792-65975,30331-32151,64859-65369-04003-79543-86449-1414,5589,69854-65204-0403-33018-84536-82811][80833,80169-03584,70311,51387,00069,19367-59532,70211,69742,39912,66675-90051-23709,50777,34201-24918-47772-89004,40743,16299,70125-33281,41547,63356,81251,34452,39051,79113-51244,33373,332-65516,47826,09054-48848,23329-34701,44665,03223-60544-05579-25562,12899,26775,78167-22369,34073,26851-46672-639,74888-3728,19101-02882-90359][54464-02613,62907,53831,28457-75896-23558,19695,71146,23032-00293-63903-30351-90819,75937-77093-81426,88508-36069-8135-80482-81095-73795-08458-79977-32998,83301-06383-71-10352,80133,16032-16671,68535,10682,76862,8204,11091,79924,3394-46404,15245,50893-65406-90208-35553,64795,70156,75573-04372,89219-1333-45608-70754,02486,80734][77347-10971,44597-51576,22067,85856-16188,44067-14134,27779,8375,48441,62687-36153-20641-61608,92278,58443-26005,27048,79654-52774,62183-66527,01406-68758,14618-46236-84877,0715-43438-92017-33402-41747,36908-72577,00913-47469-48924-78541-58418-3464,15584,03324-23133,48284,88551-25158-75122,29388-21516-71515,00596-466-19215,1614][31953-39398,51183,45265-83475-41882,52676,33681-01184-06702,78791,30858-30656-18258-44409,61963,24919,54199-37878-56133-62945-49377-72336,10984-41797,81661,92473-15982-41184,24171,00008-50782,61695,03047,39619,37673-88125,06362-06319,16363,64326,69709,90373,43627,63605-76175-39163,90173,61523,46699-75347,92184,03494-62686,36033-12091][-26585,82808-6927-06795,06464,33145,20043,63996,30075-06583,81368-21203-56678,66829-52157,29731,3997-35497,17863,26958,74144-11397-12123,3436,84913,10038-00674,76629-81489-60988,2542,51374,32426,25467,12195,2961,09506-67944,19053-71504,749-83828-63393,74214-38351-42305,09382-24063-67752-60199-42974-03363,88153,07858,56229,16776][-14465-90988,39414,00487-18256,76336-91732-20999,66892,01785-6318-67739,80473,37053,16062,49296,1832,69717,89957-78849,49067,36333-48444,16179,48401,10133,72208,72176-91369-25222,10017-00108,46452-12237,78164-22507-30888,71983-53082-65198,65006,03632-03905-67217,14548,20892-47193,29689,75692-4915-08726,13625,80993-54862-72629-25705][05028-53146-0289-58666,01182-17784-36229-08365,85351-41178,46284-44129-15397-10615,06891-28493,4869,39805-31849,51527-62808,46294,50864,88656-1628-34475-74617-46094-68423-40431-49302,66864-34384,79826-716,52536-90854,07655-63174-73666-51549-69167-3562,17985,21258,272,74864,78347,57578-23224-01921-69898,85873,59556-53252-6746][-76645-60393-48023,79931,25239-05882-1663-15964-63461-65003-45684-05172,74572,39058,84977-72087-07116,9063-57886,37654-43806-50748-45529-90557,27666-11759-03531,12129,46509-08821,90751-5097-68553-86084-67577-34293-48668-85332-12702,67018-78548,6421,08693-14881,37428-89813-19581,78747,39921-24222-78141-48859,13117,78741,696,34264][41661,31097,66276-34914,45673-66258,29336,10984-03832-85665,14053,78522,65904,83035-49468,1631-92053,6216,90763,20876-72381,23791-4245,11946,75913,50151-41814,28151-26012-03094-59504-02952-36675,00723,60455-19464-88494,57755,33158,85953,80514-19501-49521,15874-70349-27234,79826,26689,22753-04728,84303,6651,67152,50733-63923-89804][0176-83449-61705,36449,8651-44082-65217,08186,78974-33724-90474,36323,72053,33187-4955,1633-25328,21857-08142,10524-68048-01643,21724,14315-82472,32423,77986,13942-41759-82464-91994,11206,17224,11343-54049,04557-61701-66556-59145,38958-61474,23738-41139,00984-3677,31741-11764-38878,406,31847,55838-06113,62521-81063,60773,08659][34065,0298-39724,82348-14276-85602,10762,74832-67053-64836-02161,63352,35704-5888,47483,12772-77504-87337,60087,77878,48014,57026,85602,04931,79767,6284,02473,18099-31489-87743-34636-21904-78065-69527-0798-55905-48329-68635-85495,35966,24946,73435,73876,20876,04167-4851,12853-55565-11839-84668-34905,0799,77565,23973,40936,63472][52779,51844-50553,21426-86545-34422-27249,14183-13567-13601,7251-84948,44264,05936,26463,44128,22605,27907,25003,03016,9224-15,3344-09418-18175-80196-19511-47992,84086-41239,25022,69773-49878,26874,55356-17975,53604-88396,19666-3207,86949,02447,54413-68493-34284,87256-79247-19651,11042-31472,64781-79543-69328-21172-09297,14568][77164,70396,43026,72256-44579,91285-41092,70132,47468,80628,64784-5799,15906-69949,33039,07396-12263,75642,54306-2222-61906-28435-67464,23029,64469,70498,44502,41929,86225-84021-68429,14312,74592-12014,06557-77864-37057-32673,37021,76354,35218,27396,60577-6158-74256,07778-86641-05451,75145,55628,75464-7833-34034-46742,30736-13507][-78074,13983,29821,23316-70421,0808-45036,12602,7198-6458,37549,50302,03897,02984-00993,64165-47496,0147-86898-19349-84462-17338-21928-0608-23054-19644-63463-38331-84637-519,48321-03601,31969-78362,42835-78353,69676-13817-54485-59112,52848,83251-09301,62748-63745-02893-61998-81681,69368,29759-02194,60295-23377,16458,75492,87924][-85692,06338,16773,53474,14572,1935-12387-71563,6558-07172,73475,02854,12028,0157-24205,12814-0335-17224,17917,72006,34269-84578,01536,25089,41564,83097-66218-54923-46024-4103,87963-15244,00124,48739,72975,51412-3387-205,68114,36089-17513,90539,49117,88372-05173-02181-88256,50168,54016-52206-85493,43489-39017-22493-09384-36021][-15252,14442,49706,02907-81128,67609,26082-25866-27669,46684,21438,68255-05223,35149-90175,737-03762-19057-33389-46411-87448-13712,76972-80084-65538-80819-18334,37387,74645,37822-84524-85437-18065,23268,52796,34018,09343,21063,53425,88139-38164-24306-47359-70669,8571,47445-46545-8754,63675,29928-75417,13236,47437,63913-15503,65701][-75711-10484-07504,00905,58511,03229-51066,14072-3063,40827-24665,24414,72141-15372-10188,45616-39955,46184-02413,03084-39388-4717-45244,64851,51261,55776-80502,03993-04623,24198,06192-84607,56041-85095-24491,2304-55616,39374,89384,48049,40834-92053,59596-38937-41543-89478-2349-29496-28165-61812,31427,69083,5648,534-20868-67058][-29894,66617-40191-81412,74459-34752,61425,29894,31558,87198-20925-43836-51996-68981,43076,18367,19905,72919,49726-46621-38143-13273-11054-76404-24319-62096,85423-87307-82016,14084-64712,13549,27435-15012,8048,8364,17687,59574,82884,70443-29368,77989-1439-00054-23056,82061,82081-15412,3528-20781-3427,09229,84162,59275,008-04038][-38468,4156-02381-6027-42193,87829-302,67634,24615,26175,47929,10636-03246-92339-35694-70964,00812,65481,82255-0245,70259-77986-17698,22969,47605,04685-37442-83877-07478-70897-16264,31135-72423-7194,84107-20546-59016,7877,59898,32399,80238,40326,40401,27527,30735,76612-55701,25766-50616,10211-84555,56532-57957-84813,8591-14898][-63935,41989-83924,90152-69087,42429,82652,26413,24906-35843-31199-283,61377,389,1932,23645,64647-06988-62736-88712-30622,56655-50071-57739-57609,02269-73425,11597,13259-04607-38333-51878,54373-87926,46144,23464-28148,038,44006,74323-09831-13722-49585-75606-59699,12899,7778,74357-74374-38236-41207,01689,68728,78156-41838,32573][06229-44109,38079,78062-04248,27405,49818,07933,15054,46005-23997-18641,69793,82239-59897,8049,16816-66108,7129-09301,83827-85847-3522-47035,5566,56963-60188,77684-37143,23961-19794,37971,02136-71464,33879,22045-14841,14881-74809,65019-5975,6088-57404,51466-40552-31413,10011-07013,46298,44882-09249-78018,55885,69802-13416-57848][1243-39608,17944,14026-77266-45278-70154,86183,85149,1177-41174-48591-33617-03725,238,65857,143-39064,09969,53818,17121,85346-30613,06782,67911,38787-0053,68043,22573,79526-46948-58038,57209-69923,21726,82483-24356-74556-42161-48469,52891-82134,82547-18194,91645,71849,3873,60803-52065,58209,1867-64661,17019,38383-07828,28278][-73834,56226,32455,35939,72985-90684,82959-0581-14572-26992,31638-11916,25478-57487,09031,61623,29189-30146-43578,20393,47417-66389,08589-63752,42435,8441,59442-56904-91093-37298,04513-68907-00716,38232,61136,84386-31892-49146,10473,00241-39273-04745,09312-61005,90406,45498-06212,04314-87951,8238-80961-81783-88138-93055,56537,09906]][[-7598-75228-68463,70911-19896-12873,62868-88716,53093,2367,12219-36677-29151-34712-37357,61872-70258,78112-56888-58931,62743,14245,03919,66231-79689-26474,44954,09995,68565-39011-73103-04216-62215][-59026-34613-01507-03856-01907,79085,28059,18571-31728,74005,43162,09057-42641-72353,79789,28288-87466,65634-71716,02069,0515,12162,28071-62869,16204,67066-21803-31464,29236,69194-33398-02996-15526][-87789,04468-89544-86038,35097-69168,33307-66593-15993,70918-0405,89955-32348-41055-76263-40929-8714-72282,61807,83241,45059,7804-57778-43994-47417,40662,71785-89402,34049-72655,14876,39401,04032][89348,26283-90369-21555,6428,68776-41897,65409-05298-46063-06842-16786,40748,2991,36797-47208,51358-52645,24949,3702,555,51054-40567-30258-79502,54447,61646,48239,48196-56689-27881,83195,28436][-39924-83359,74184,43479,21613,30733-33983,34543-11272-29108,453,41757-87815-80379,24586-37013-37727-41832-03407,36831-61412-3157,78124-6259,08229-28525-7294,75368-05584,82106,51807,12384,86454][-2184-72863,15341,52002,56913,05777-30214,30131-17963-27324-56542,24395,14621-82429,34226,03994,10279-74136,89015-66556-36932-64364,01898-06552-36849-63935-83377,15624,7444,43643-56868,44355-58373][-72179,32216,32348-61482-06405,38409,41334-5907-66806,7212,76733-62452,71909,85351-05132,41339-24542,76905,58958,34813,59385-73862-89179,21834,43447-78715,13814,43983,28553,30333,14506,13766-08945][-39582-0502-28283-82405-36537,88161,41759-22881-24582,50951,33196,63267-83263,86864-19648,19588,73748-35292-6726-86291,28752-2557,21908-69492,67805,79274-57693,26914,20554,60163,20285-13915,32244][48654-65166,42215-26751,37944-63845,38208,09437-82066-25228,34137-49456,79612-2817,08692-46069,78548,20595,90767,32067,27766,8441,51496,69001-81068-03832-09203,05227,52173,00279-55614,39914,50243][60577,12318-53016-38575,37327-06043,58787,86151-32148,66082-86105-3489-13269-84743-273-88432,72135-63478,55396-7112,47707-71622-0941-07903,87744,80981-33934,57598,49834-30441-6104-10624-73758][-80654-27762-22385-36875,03151,82561-74288,03608-12593-68711-52468-488-09878,39595,89582,81838-35056-1383-29103,60771-68035-72024-16311,62583-83887,10628-43856,52284-54554-28627-19051-36498,87073][36454-27243-04635-01919,01351-71644-8476-00314-67785,87343-50216,8866,19649-25331,30227-2796,48461,20391,6424-20969-58787,12408,7848-13132,05831-03835-57523,32494,37684,31531,09763-08932,45642][-00444,06483-78175,07174-74936-2815-61475,50492,67752-73191-12558,30291-11196-79222-46759-84435,42586-54074-65178,14927-53336-46106-46707-50745,10478-74782-31961-23475,2339-54746-00637,77904-02771][90461,52275-03251-90153,12288-74394-85023-14056-00063,40335-55472,73839,59505-15268-22991,18402-09319,35875-03824-22951-56329,54497,02592-86068,8069,42789,00602,14583-19228-56998-2063,75254,75877][28717-73694,24748,19968-78225-10717-20986-7169,28008,55649-7238,93578,3258,66583,83303-39215,24553,8278,18117-42311,304-44864,58649-09233-89523-72621,44593-58982,10198,53712,28722,59334-41521][-63381-90496,81166,57377-21836,39963,82607-60079-5189-26632-57318,29902,14644,34182-52141-73311,09671,35073,73566-91065-34923-30753,6712-00974-71066,18071,56631,33968,82964-62513-17761,14703-12941][-56191-12655,12105-6196-05646-78717-6609-32427-83711,70158,7895,55976-21132,68314-53336-53665-1625-88056,16702,23223-18008,40593,39666,59651,29356,03252,04354-22429-80141-90465-17513,37354,144][43002-68541,38594,05955-17896,49047,14995-41648,08977,56852-25081-17435-39721,1625,06741-17895-91895,83663-26205,30134-5496,70837,03568,1516-66988-84978,27345-3841-82995,47778,4615-30662-71488][38823,22877-63515-18751,61927,80933,24294-70639,75601,7223,52716,23468,78664,48729-05079,31895-59822,10165,6907,29527-85767-50234,1374-2714,43564-12146,60017,39106-48436-84524,79285,88265-08425][-03636,16809-17693-18931,63247-11426,05967,73177-6922,56393-30393-55309-26055,73497-00318,10236-13944,14234-54496-41339-2546-123-83038-80033-64807,07435-65356-20715-57111,00082-75016-72486-09987][73796,28626,15923-1095-26786-17458-14447,28521,38017,71053,28262,87076,03898-11092-64439-45355-4068-12013-10459,85432-30435-4039,62726,87029,0941,17153-41245-6814,24016-54507-87192,56143,79747][-84439-15855,04258-83467,46452,55467-67707,20087-86661,76387,75384-18175,26578-25152,12668,55315,29235-25937-1619,83056,62066-49014-37963-77353,44207,61311,56829-64036-38137,42765,09087,65594,77438][-68767-38132-33169-24111,57365,77061-23202-80164-14413,58428-82096,30476,62095,45835,30425-64596,86919,52137,65009,4351-22439,4756-29156-12861,1514,04888,92007-45485-22369,11237,28601-6806,06659][-08093-6586-0477,22659-62692,44254-16519-76412,44441-29259-26023,26732-68036,22146,14497-51308-73098,63777,4443,46831,87536-48962,65757-00808-52635,85369-66333,2844,77045,32006-45448-62085,50296][-10783,79221-26669-49716,25827-0838-63289-52978,6907-70987-8964,30332,75467,30574-59924,24044,6164,89633-3054-90257-16525,35442,40254-89918,59829-6828-52544,04783-50208,30892,26959-85535-51147][-65788-68672-70607,86654,87832-39574,38093,02711-32663,02117,54363-86866,02532-34209-18714-63836-03903-11342-86597-13767-87733-38225-37884,20245-18924,05522-83483,70454,8137,8472-1282-40277,38659][-18097-72556-5552,50086-55298,06474,70058-73443,45591,7879,13001-01031-91043-36201,70019,54123,01708-11781-87012,68755,06749-90845-35281,81297-00999-26549,06984,32596,54543,45456,75336,05756,82962][-36872-28589-75692,07548-51247,79186,50089,01441-59476,82449-46507,09272-02135-42045-2691-08152,46214,28688-41125-6335-67901-33225,281,89208,31078-19193-02145-15255,02356-77208,05014-10475,89651][20463,23396,38805-42044,20822-12259,74806,01,63868,32202,60385,49623,69748-78336,43058,05472-08277,61645,9201,25081-73688-27457-50285-78812-51608-68697-72603,63329-01252,57176,40902,05024,06545][-91503-30728,71902,05504-5182,56842-27614,78155-34699-41302-29574-69045,6204,23001,82711,24325,41844,50694,49884,64764,39884-06602-32484-25092-37702,90396,88526-90664,65696,63119-34968-33507-31029][34172-80868,87343,14396,19999,19611-1815-01706-82934,34197,02226-44326,24728,55742,37636,7049-50818-86777-85828,20115-38519-74464-69741,72879-42017,62269,3802-88174,78154,67113-68165-09803-58585][89583-54773-91063,43696-36309,17418,55954-11822,02271-67687-50567,00856,61055,77913,43678,28076-04393,52952-49357-05813-30382,42092-33607-34197-28663-82421-85636,78141,60187,14767,48346,11731,04836][-22296-29306,71545-4572,49236,08629,72005-72335,3502-10811,53254,69626,2538-25636-59501,50106,15225-12164,63533,53248,55077-07425-55002,57228,60002-32934,504-39035,74992-78874-02101,67586-15029][-82061,54243,14189-86175,30358-13562-14483,50371-66973,45068,84999,88148-27593,4693,81497,24437-74285,70423,60767-74674,02394,04035,40439,64901,46795,89601,09081-83922-93207,33261,84558,722,31269][-36744,16972,48982,09617-30285,70457-61251,03087,68975,41808,00936,61196-03568,91543-18413,0822,81052,41422,42708,36154-56238-30819-67668-89469,7764,40958-37381,75361,33907,13019-60029-30219,27528][-41386-17873-11434-46444,18087-36744-71534-33882,49754,23503,84674-79783-44162-41454-80993,2831-20198,36185-86244,52457,28498-76883,78521,47965,91574-07392,07036,61664-92162,0144-69329,23073-44204][-5061,07508-77799-2085,797,54615-75264-04143,81674-09234,69039-49897-74464,43325,44601,60985,76576-81594,76132,05653-83473,23834-20466-59439-45273-77812-48843-23333,44782,15598-45082-68015-00715][-1025,41257,54441,16778-49625,79545,07772,16599,50765-79942-57615,86208,87453-30277-27576,02409,53415,20337,69428,20849-31491,5893-53565-85188,32334,57808,14454,45757,25837,72076,05531-71421-56392]]]

*/


const memSize = 32; // Resent to itself at each computation
//const comSize = 32; // To talk to others players

/*
 7. Next wall/player distance (left, up, right, left-up, right-up, down left, down right)
 8. is Wall or Player (down, up, left, right, up-left, up-right, down-left, down-right)
 7. Next coin distance (left, up, right, left-up, right-up, down left, down right)
*/
const inputs = 22 + memSize //+ comSize;

/*
 1. Wait
 3. Jump/Move
 2. Rotate
*/
const outputs = 6 + memSize //+ comSize

const hiddenLayers = [32]; // input>[first, ..., last]>output

const evolRatio = 1/256;

function Genetic(inheritance) {
	/*
		[0]: Links between input and hidden 0
			[0]: Links from input to neuron 0 of hidden 0
				[0]: Link from neuron 0 of input to neuron 0 of hidden 0
				[1]: Link from neuron 0 of input to neuron 1 of hidden 0
				...
				[m]: Link from neuron 0 of input to neuron m of hidden 0
			[1]: Links from input to neuron 1 of hidden 0
			...
			[x]: Links from input to neuron x of hidden 0
		[1]: Links between hidden 0 and hidden 1
		...
		[n+1]: Links between hidden n and output
	*/
	this.genes = [];
	
	/*
	 input = {
		input.dist_left: int >=0
		input.dist_right: int >=0
		input.dist_up: int >=0
		input.dist_ul: int >=0
		input.dist_ur: int >=0
		input.dist_dl: int >=0
		input.dist_dr: int >=0
		input.isPlayer_down: boolean
		input.isPlayer_left: boolean
		input.isPlayer_right: boolean
		input.isPlayer_up: boolean
		input.isPlayer_ul: boolean
		input.isPlayer_ur: boolean
		input.isPlayer_dl: boolean
		input.isPlayer_dr: boolean
		input.coin_left: int >=0
		input.coin_right: int >=0
		input.coin_up: int >=0
		input.coin_ul: int >=0
		input.coin_ur: int >=0
		input.coin_dl: int >=0
		input.coin_dr: int >=0
	 }
	
	 memory = -1 to 1 array (size = memSize)
	
	 communication = [{
		sqdist: (x1-x2)^2+(y1-y2)^2
		com: -1 to 1 array (size = comSize)
	 }]
	*/
	this.buildOutput = function(input, memory/*, communication*/) {
		// Building input
		const inpt = [
			input.dist_left  ? 1/input.dist_left  : -1,
			input.dist_right ? 1/input.dist_right : -1,
			input.dist_up    ? 1/input.dist_up    : -1,
			input.dist_ul    ? 1/input.dist_ul    : -1,
			input.dist_ur    ? 1/input.dist_ur    : -1,
			input.dist_dl    ? 1/input.dist_dl    : -1,
			input.dist_dr    ? 1/input.dist_dr    : -1,
			input.isPlayer_down  ? 1 : -1,
			input.isPlayer_left  ? 1 : -1,
			input.isPlayer_right ? 1 : -1,
			input.isPlayer_up    ? 1 : -1,
			input.isPlayer_ul    ? 1 : -1,
			input.isPlayer_ur    ? 1 : -1,
			input.isPlayer_dl    ? 1 : -1,
			input.isPlayer_dr    ? 1 : -1,
			input.coin_left  ? 1/input.coin_left  : -1,
			input.coin_right ? 1/input.coin_right : -1,
			input.coin_up    ? 1/input.coin_up    : -1,
			input.coin_ul    ? 1/input.coin_ul    : -1,
			input.coin_ur    ? 1/input.coin_ur    : -1,
			input.coin_dl    ? 1/input.coin_dl    : -1,
			input.coin_dr    ? 1/input.coin_dr    : -1,
			...memory
		];
		
		// Compute communication
		/*const comm = [];
		for(let i=comSize; i>0; --i)
			comm.push(0);

		let total = 0;
		for(other of communication) {
			for(c in other.com)
				comm[c] += other.com[c]/other.sqdist
			total += other.sqdist
		}

		for(let i=0;i<comm.length;i++)
			inpt.push(total<=0?0:comm[i]/total);*/
		
		// compute througth network
		const otpt = this.arrOutput(inpt);

		return {
			wait:    (otpt.shift()+1)/2,
			mvLeft:  (otpt.shift()+1)/2,
			mvRight: (otpt.shift()+1)/2,
			mvUp:    (otpt.shift()+1)/2,
			rtLeft:  (otpt.shift()+1)/2,
			rtRight: (otpt.shift()+1)/2,
			mem: otpt//.splice(0,memSize),
			//comm: otpt
		};
	}
	
	this.arrOutput = function(input) {
		let otpt = input;
		for(let sl=0; sl<this.genes.length; sl++) {
			//console.log(otpt)
			let inpt = [1, ...otpt];
			otpt = [];
			for(let sg=0; sg<this.genes[sl].length; sg++) {
				otpt[sg] = 0;

				//console.log(inpt.length, this.genes[sl][sg].length)
				
				for(let s=0; s<this.genes[sl][sg].length; s++)
					otpt[sg] += inpt[s] * this.genes[sl][sg][s]
				
				// FONCTION D'ACTIVATION
				// otpt[sg] = sigmoid(otpt[sg])
				otpt[sg] = Math.tanh(otpt[sg])
			}
		}
		
		return otpt;
	}
	
	this.export = function() {
		let str = JSON.stringify(this.genes)
		str = str.replace(/[1-9]+\.[0-9]+/g, '0.99999')
		str = str.replace(/0\.([0-9]{0,5})[0-9]*/g, '$1')
		str = str.replace(/([0-9])0+([^0-9])/g, '$1$2')
		str = str.replace(/,-/g, '-')
		str = str.replace(/],\[/g, '][')
		return str;
	}
	this.import = function(string) {
		str = string.replace(/]\[/g, '],[')
		str = str.replace(/([^[])-/g, '$1,-')
		str = str.replace(/([0-9]+)/g, '0.$1')
		this.genes = JSON.parse(str);
	}
	
	// // // INIT // // //
	
	if(inheritance && inheritance.length > 0) {
		// Average of all inherited + random value
		const nb = inheritance.length;
		console.log('New Gen from', nb, 'parents')
		
		// sl: synapse layer
		for(let sl=0; sl<inheritance[0].length; sl++) {
			this.genes[sl] = [];
			// sg: synapse group
			for(let sg=0; sg<inheritance[0][sl].length; sg++) {
				this.genes[sl][sg] = [];
				// s: synapse
				for(let s=0; s<inheritance[0][sl][sg].length; s++) {
					let total = 0;
					let chance = Math.random()*2-1; // -1 to 1
					
					for(let i=0; i<inheritance.length; i++)
						total += inheritance[i][sl][sg][s];
					
					this.genes[sl][sg][s] = (total / nb)*(1-evolRatio) + chance * evolRatio;
				}
			}
		}
	} else {
		console.log('New Random Gen')
		// random generation
		this.genes.push([inputs, hiddenLayers[0]])
		for(let l=1; l<hiddenLayers.length; l++)
			this.genes.push([hiddenLayers[l-1], hiddenLayers[l]]);
		this.genes.push([hiddenLayers[hiddenLayers.length-1], outputs])
		
		// sl: synapse layer
		for(let sl=0; sl<this.genes.length; sl++) {
			const size0 = this.genes[sl][0]+1; // +1 for Bayes
			const size1 = this.genes[sl][1];
			// sg: synapse group
			for(let sg=0; sg<size1; sg++) {
				this.genes[sl][sg] = [];
				// s: synapse
				for(let s=0; s<size0; s++)
					this.genes[sl][sg][s] = Math.random()*2-1
			}
		}
	}
	
}

function relativeXY(rot,x,y) {
	switch(rot) {
		case 0: return [+x,+y];
		case 1: return [-y,+x];
		case 2: return [-x,-y];
		case 3: return [+y,-x];
	}
}
function generateAIPlayer(grid) {
	const astro = new Astro(grid);
	astro.gen = new Genetic();
	const input = {}
	let memory = []
	for(let i=0;i<memSize;i++)
		memory.push(0)
	//let comm = []
	
	const maxDist = 32
	const findNext = function(mv) {
		let dist = 0
		let coin = 0
		let isPlayer = false
		
		let x = astro.x
		let y = astro.y
		let count = 0
		
		// can see walls and players behind coins
		// can see coin behind players
		// cant see coins behind walls > 0
		while(count < maxDist) {
			x += mv[0]
			y += mv[1]
			count ++
			
			if(!coin && grid.isCoinOn(x,y)) {
				coin = count
				continue
			}

			let what = grid.getCell(x,y)
			if(!what)
				continue

			dist = count
			if(what !== 'wall')
				isPlayer = true

			break
		}
		
		return [dist, isPlayer, coin];
	}
	
	astro.askForAction = (cb)=>{
		let mv =relativeXY(astro.rot,0,-1)
		input.isPlayer_down = (''+grid.getCell(astro.x+mv[0], astro.y+mv[1])).startsWith('astro')
		
		let found;
		found = findNext(relativeXY(astro.rot,-1,0));
		input.dist_left = found.shift()
		input.isPlayer_left = found.shift()
		input.coin_left = found.shift()
		
		found = findNext(relativeXY(astro.rot,1,0))
		input.dist_right = found.shift()
		input.isPlayer_right = found.shift()
		input.coin_right = found.shift()

		found = findNext(relativeXY(astro.rot,0,1))
		input.dist_up = found.shift()
		input.isPlayer_up = found.shift()
		input.coin_up = found.shift()

		found = findNext(relativeXY(astro.rot,-1,1))
		input.dist_ul = found.shift()
		input.isPlayer_ul = found.shift()
		input.coin_ul = found.shift()

		found = findNext(relativeXY(astro.rot,1,1))
		input.dist_ur = found.shift()
		input.isPlayer_ur = found.shift()
		input.coin_ur = found.shift()

		found = findNext(relativeXY(astro.rot,-1,-1))
		input.dist_dl = found.shift()
		input.isPlayer_dl = found.shift()
		input.coin_dl = found.shift()

		found = findNext(relativeXY(astro.rot,1,-1))
		input.dist_dr = found.shift()
		input.isPlayer_dr = found.shift()
		input.coin_dr = found.shift()
		
		const out = astro.gen.buildOutput(input, memory/*, comm*/);
		memory = out.mem;
		
		// 0:up, 1:left, 2:down, 3:right
		let dir = astro.rot
		let acts = [
			{chance:out['wait'], code:-1},
			{chance:out['mvUp'], code:dir},
			{chance:out['mvLeft'], code:(dir+1)%4},
			{chance:out['mvRight'], code:(dir+3)%4},
			{chance:out['rtLeft'], code:4},
			{chance:out['rtRight'], code:5},
		]
		acts = acts.sort((a,b)=>b.chance - a.chance)
		while(!cb(acts.shift().code));
	};
	
	return astro;
}
