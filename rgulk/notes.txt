Note: <Foo> = Foo is a Class
      <AFoo> = Foo is Abstract
      <IFoo> = Foo is Interface

	<AScreen> (background things we can see; it can and should be exactly once instantiated at every moment)
	<TitleScreen> extends <AScreen> (screen with login/create account etc.. shown)
		- Game settings button (Open the SettingsWindow)
	
	<TileScreen> extends <AScreen> (screen with the current location shown)
		- Game settings button (Open the SettingsWindow)
		- Player settings button (Open a ToolWindow linked to player information)
		- Inventory button (Open a ToolWindow linked to player inventory)
		- Tile button (Open a ToolWindow linked to the Tile)
	
	<AWindow> (frame with things inside it, shown on top of the screen; can be open, moved, closed, resized etc..)
		# openNewWindow
		# replaceWindow(w)
	
	<Tool> extends <AWindow> (window showing things to do, composed of <AToolPart>)
	<SettingsWindow> extends <AWindow> (showing game options and other meta-game info)
	
	<Tile> (composing the map of the game, composed of <Cell>)
	<Cell> (can have an <CellElement> on it)
	<CellElement> (have an actuator)
	<Actuator> (do in-game things)
		- canDo: boolean
		- do

	<AToolPart> (can be a button with an actuator, till a frame with a graph)

Example:

	Tile 1,2   Tile 1,3
	 0 1 2 3   0 1 2 3 
   0|_|_|_|_| |_|_|_|_|
   1|_|_|_|a| |b|_|_|_|
   2|_|_|_|_| |_|_|c|_|
   3|_|_|_|_| |_|_|_|_|
	
	
	onClick somewhere: {
		if Tile.hasCell(clickedX, clickedY)
			- Tile.getCellElementAt(x,y).Actuator.do
		else
			- Tile.getActuatorForCellsWithoutElement.do
	}
	
	a: Cell.CellElement.Actuator.do:
		(player)=>{player.moveTo(Tile(1,3),Cell(0,1))}
		
	b: Cell.CellElement.Actuator.do:
		(player)=>{player.moveTo(Tile(1,2),Cell(3,1))}
		
	c: Cell.CellElement.Actuator.do:
		(player)=>{player.displayWindow(someToolWindow)}
		
	(x,y) (Cell without CellElement)
		Tile.getActuatorForCellsWithoutElement (<Actuator>)
			- do: (player)=>{player.moveToCell(x,y)}

	
	